# >>>>>>>>>>>>>>>>>>>>>>>>>>>
# Auto-generated by agi-pack (version=0.1.19).
FROM nvidia/cuda:11.8.0-base-ubuntu22.04 AS base-gpu

# Setup environment variables
ENV AGIPACK_PROJECT nos
ENV AGIPACK_PYENV nos-py38
ENV AGIPACK_PATH /opt/agi-pack

ENV DEBIAN_FRONTEND="noninteractive"
ENV PYTHON_VERSION 3.8.15
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PYTHONWARNINGS ignore
ENV PIP_CACHE_DIR /var/cache/pip
ENV CONDA_PKGS_DIRS /var/cache/conda/pkgs

# Setup conda paths
ENV CONDA_PATH=${AGIPACK_PATH}/conda/envs/${AGIPACK_PYENV}
ENV CONDA_PREFIX=${CONDA_PATH}
ENV CONDA_EXE=${CONDA_PATH}/bin/conda
ENV PATH=${CONDA_PATH}/bin:${AGIPACK_PATH}/conda/bin:$PATH
ENV CONDA_DEFAULT_ENV ${AGIPACK_PYENV}

# Install base system packages
RUN apt-get -y update \
    && apt-get -y --no-install-recommends install \
    curl bzip2 git ca-certificates

# Install additional system packages
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get -y update \
    && apt-get -y --no-install-recommends install \
    gnupg2 \
    sudo \
    curl \
    tzdata \
    build-essential \
    git \
    && echo "system install complete"

# Install mambaforge, with cache mounting ${CONDA_PKGS_DIRS} for faster builds
RUN --mount=type=cache,target=${CONDA_PKGS_DIRS} \
  curl -sLo ~/mambaforge.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh" \
  && chmod +x ~/mambaforge.sh \
  && ~/mambaforge.sh -b -p ${AGIPACK_PATH}/conda \
  && ${AGIPACK_PATH}/conda/bin/mamba init bash \
  && ${AGIPACK_PATH}/conda/bin/mamba config --add channels conda-forge \
  && ${AGIPACK_PATH}/conda/bin/mamba create -n ${AGIPACK_PYENV} python=${PYTHON_VERSION} -y \
  && rm ~/mambaforge.sh

# Upgrade pip
RUN pip install --upgrade pip

# Install conda packages, with cache mounting ${CONDA_PKGS_DIRS} for faster builds
# Note: Cache mounts allow us to re-use the cache for conda packages
# instead of having to re-download them every time we build.
RUN --mount=type=cache,target=${CONDA_PKGS_DIRS}  \
    mamba install -yv \
    pytorch==2.0.1 \
    torchvision \
    pytorch-cuda=11.8 \
    cudatoolkit=11.8 \
    cudnn=8.2.1 \
    -c pytorch -c nvidia \
    && echo "conda/mamba install complete"

# Install pip requirements, with cache mounting ${PIP_CACHE_DIR} for faster builds
# Note: Cache mounts allow us to re-use the cache for pip packages
# instead of having to re-download them every time we build.
COPY requirements/requirements.txt /tmp/reqs/requirements/requirements.txt
COPY requirements/requirements.http.txt /tmp/reqs/requirements/requirements.http.txt
COPY requirements/requirements.server.txt /tmp/reqs/requirements/requirements.server.txt
RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
    pip install --upgrade pip \
    && pip install -r /tmp/reqs/requirements/requirements.txt \
    && pip install -r /tmp/reqs/requirements/requirements.http.txt \
    && pip install -r /tmp/reqs/requirements/requirements.server.txt \
    && echo "pip requirements install complete"

# Export conda environment on login
RUN echo "export CONDA_PATH=${AGIPACK_PATH}/conda/envs/${AGIPACK_PYENV}" >> ~/.bashrc \
    && echo "export PATH=${AGIPACK_PATH}/conda/envs/${AGIPACK_PYENV}/bin:$PATH" >> ~/.bashrc \
    && echo "export CONDA_DEFAULT_ENV=${AGIPACK_PYENV}" >> ~/.bashrc \
    && echo "mamba activate ${AGIPACK_PYENV}" > ~/.bashrc

# Setup working directory
WORKDIR /app/$AGIPACK_PYENV

# Add project files
ADD ./scripts/entrypoint.sh /app/entrypoint.sh

# Run commands
RUN echo "running commands"
RUN --mount=type=cache,target=${CONDA_PKGS_DIRS} \
    --mount=type=cache,target=${PIP_CACHE_DIR} \
    mamba install -y -c conda-forge x264=='1!161.3030' ffmpeg=4.3.2
RUN --mount=type=cache,target=${CONDA_PKGS_DIRS} \
    --mount=type=cache,target=${PIP_CACHE_DIR} \
    python -c "import torch as t; print(f'torch={t.__version__}, cuda={t.cuda.is_available()}, cudnn={t.backends.cudnn.is_available()}')"
RUN echo "run commands complete"

# Setup environment variables
ENV LOGURU_LEVEL=WARNING
ENV TZ=America/Los_Angeles
ENV NOS_HOME=/app/.nos
ENV NOS_LOGGING_LEVEL=WARNING
ENV NOS_DASHBOARD_ENABLED=0
ENV NOS_MEMRAY_ENABLED=0
ENV TORCH_HOME=${NOS_HOME}/cache/torch
ENV HF_HOME=${NOS_HOME}/cache/huggingface
ENV TRANSFORMERS_CACHE=${NOS_HOME}/cache/transformers
ENV RAY_LOG_TO_STDERR=0
ENV RAY_DEDUP_LOGS=1
ENV RAY_USAGE_STATS_ENABLED=0
ENV RAY_DATA_DISABLE_PROGRESS_BARS=1
ENV RAY_CONDA_HOME=/opt/conda
ENV RAY_ENABLE_MAC_LARGE_OBJECT_STORE=1

# >>>>>>>>>>>>>>>>>>>>>>>>>>>
# Auto-generated by agi-pack (version=0.1.19).
FROM base-gpu AS gpu

# Setup working directory
WORKDIR /app/$AGIPACK_PYENV

# Add project files
ADD ./pyproject.toml ./pyproject.toml
ADD ./nos ./nos

# Run commands
RUN echo "running commands"
RUN --mount=type=cache,target=${CONDA_PKGS_DIRS} \
    --mount=type=cache,target=${PIP_CACHE_DIR} \
    pip install --no-deps '.' && rm -rf build
RUN echo "run commands complete"
CMD ["/app/entrypoint.sh"]
# >>>>>>>>>>>>>>>>>>>>>>>>>>>
# Auto-generated by agi-pack (version=0.1.19).
FROM gpu AS test-gpu

# Install additional system packages
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get -y update \
    && apt-get -y --no-install-recommends install \
    make \
    && echo "system install complete"

# Install pip requirements, with cache mounting ${PIP_CACHE_DIR} for faster builds
# Note: Cache mounts allow us to re-use the cache for pip packages
# instead of having to re-download them every time we build.
COPY requirements/requirements.test.txt /tmp/reqs/requirements/requirements.test.txt
COPY requirements/requirements.dev.txt /tmp/reqs/requirements/requirements.dev.txt
RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
    pip install --upgrade pip \
    && pip install -r /tmp/reqs/requirements/requirements.test.txt \
    && pip install -r /tmp/reqs/requirements/requirements.dev.txt \
    && echo "pip requirements install complete"

# Setup working directory
WORKDIR /app/$AGIPACK_PYENV

# Add project files
ADD ./makefiles ./makefiles
ADD ./Makefile ./Makefile
ADD ./tests ./tests
CMD ["/app/entrypoint.sh"]