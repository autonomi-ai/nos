ARG BASE_IMAGE
FROM ${BASE_IMAGE} as base

ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0 8.6+PTX" \
    TORCH_NVCC_FLAGS="-Xfatbin -compress-all" \
    CMAKE_PREFIX_PATH="$(dirname $(which conda))/../" \
    FORCE_CUDA="1"

# Install the required packages
RUN apt-get update \
    && apt-get install -y git ffmpeg libsm6 libxext6 ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install MMEngine and MMCV
RUN pip install openmim && \
    mim install "mmengine>=0.7.1" "mmcv>=2.0.0"
RUN pip install future tensorboard opencv-python-headless

# Clone MMDetection for `projects/EfficientDet`
WORKDIR /app
RUN conda clean --all \
    && git clone https://github.com/open-mmlab/mmdetection.git /app/mmdetection \
    && cd /app/mmdetection \
    && pip install --no-cache-dir -e .
ENV PYTHONPATH=/app/mmdetection:$PYTHONPATH

# >>>>>>>>>>>>>>>>>>>>
# Install NOS / server
# >>>>>>>>>>>>>>>>>>>>
FROM base as server

WORKDIR /tmp/$PROJECT
ADD pyproject.toml .
ADD nos nos
RUN pip install . --no-deps && \
  rm -rf ~/.cache/pip && \
  rm -rf /tmp/$PROJECT

WORKDIR /app/$PROJECT
ENV NOS_ENV "mmdet-dev"

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Install NOS test environment
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>
FROM server as test

RUN apt-get update \
  && apt-get install make
ADD pyproject.toml .
ADD nos nos
ADD requirements requirements
ADD makefiles makefiles
ADD Makefile .
ADD tests tests
RUN pip install -e '.[test]'
