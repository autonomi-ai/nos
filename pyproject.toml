[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "autonomi-nos"
description = "Nitrous oxide system (NOS) for computer-vision."
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.7.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
]
dynamic = ["version", "dependencies"]

[project.urls]
"Documentation" = "https://autonomi-ai.github.io/nos/"
"Source Code" = "https://github.com/autonomi-ai/nos"

[tool.setuptools.dynamic.optional-dependencies]
server = {file = ["requirements/requirements.server.txt"]}

[project.optional-dependencies]

# Development related packages
# Note: Currently torch depdendencies are not included here as they are not
# available on pypi and require an extra-index-url to be specified.
dev = [
    "black[jupyter]==22.3.0",
    "build==0.10.0",
    "pre-commit==3.2.2",
    "ruff==0.0.262",
]

test = [
    "pytest==7.1.2",
    "pytest-xdist==2.5.0",
    "pytest-asyncio==0.21.0",
    "typeguard==2.13.3",
]

# Documentation related packages
docs = [
    "mkdocs==1.4.2",
    "mkdocs-material==9.0.14",
    "mkdocstrings==0.20.0",
    "mkdocstrings-python==0.8.3",
]

[project.scripts]
nos = "nos.cli.cli:app_cli"
nos-grpc-server = "nos.server.service:main"

[tool.setuptools.dynamic]
version = {attr = "nos.version.__version__"}
dependencies = {file = ["requirements/requirements.txt","requirements/requirements.server.txt"]}

# for specifying additional pypi index urls
# see https://setuptools.pypa.io/en/latest/userguide/dependency_management.html
[options]
dependency_links = [
    "https://download.pytorch.org/whl/cu117",
]

[tool.setuptools.packages.find]
include = ["nos*","scripts*"]

[tool.setuptools.package-data]
"*" = ["*.json", "py.typed", "setup.bash", "setup.zsh"]

[tool.black]
line-length = 119
target-version = ['py38']
exclude = '''
    /(
        \.eggs
      | \.git
      | \.hg
      | \.mypy_cache
      | \.tox
      | \.venv
      | _build
      | buck-out
      | build
      | dist
      | nos/models/openmmlab/configs/mmdetection/
    )/
'''

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # E501: Line too long
    "C901",  # C901: Function is too complex
    "B008",  # do not perform function calls in argument defaults
    "B904",  # B904: check for raise from None
]
line-length = 119
target-version = "py38"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "venv",
    "nos/models/openmmlab/mmdetection/configs",
    ]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"nos/models/openmmlab/configs/*.py" = ["F401"]

[tool.ruff.isort]
lines-after-imports = 2

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.pytest.ini_options]
addopts = "-sv -m 'not (skip) and not (benchmark) and not (e2e)'"
markers = [
    "e2e", # End-to-end integration tests
    "benchmark", # Benchmark tests that is slow for basic CI
    "asyncio", # Async IO tests
]
filterwarnings = [
    "error",
    "default:Using or importing the ABCs:DeprecationWarning:unittest2.*",
    "default:.*not marked using pytest.hook.*",
    "ignore:.*not marked using pytest.hook.*::xdist.*",
    "ignore::DeprecationWarning",
    "ignore::ResourceWarning",
]
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
