[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "autonomi-nos"
description = "Nitrous oxide system (NOS) for computer-vision."
license = {file = "LICENSE"}
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
]
dependencies = [
    "av>=10.0.0",
    "opencv-python-headless==4.6.0.66",
    "rich>=12.5.1",
    "typer>=0.7.0",
]

[project.urls]
"Documentation" = "https://autonomi-ai.github.io/nos/"
"Source Code" = "https://github.com/autonomi-ai/nos"

[project.optional-dependencies]

# Development related packages
# Note: Currently torch depdendencies are not included here as they are not
# available on pypi and require an extra-index-url to be specified.
test = [
    "pytest==7.1.2",
    "pytest-xdist==2.5.0",
    "typeguard==2.13.3",
]
dev = [
    "black[jupyter]==22.3.0",
    "build==0.10.0",
    "pre-commit==3.2.2",
    "ruff==0.0.262",
]

# HF transformers, diffusers related packages
hf = [
    "transformers==4.21.2",
    "diffusers==0.3.0",
    "huggingface_hub",
]

# Documentation related packages
doc = [
    "mkdocs==1.4.2",
    "mkdocs-material==9.0.14",
    "mkdocstrings==0.20.0",
    "mkdocstrings-python==0.8.3",
]

[project.scripts]
nos = "nos.cli.cli:app_cli"

[tool.setuptools.dynamic]
version = {attr = "nos._version.__version__"}

# for specifying additional pypi index urls
# see https://setuptools.pypa.io/en/latest/userguide/dependency_management.html
# [options]
# dependency_links = [
#     "https://download.pytorch.org/whl/cu117",
# ]

[tool.setuptools.packages.find]
include = ["nos*","scripts*"]

[tool.setuptools.package-data]
"*" = ["*.json", "py.typed", "setup.bash", "setup.zsh"]

[tool.black]
line-length = 119
target-version = ['py39']

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    # "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # E501: Line too long
    "C901",  # C901: Function is too complex
    "B008",  # do not perform function calls in argument defaults
]
line-length = 119
target-version = "py39"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
lines-after-imports = 2

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
